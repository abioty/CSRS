
################################################################################
#  Clinical Applicability Analysis: NDI and Composite Scores
#  Continuation of SRC analysis
################################################################################

# Additional required library
if (!require("pROC")) install.packages("pROC")
library(pROC)

# 16. Define and Calculate NDI ----
cat("\n", rep("=", 80), "\n", sep = "")
cat("CLINICAL APPLICABILITY ANALYSIS: NEURODEVELOPMENTAL IMPAIRMENT\n")
cat(rep("=", 80), "\n\n", sep = "")

# Define NDI as any Bayley-III score <85
df_ndi <- src_scores %>%
  mutate(
    NDI = as.numeric(cog_comp_score < 85 | lang_comp_score < 85 | motor_comp_score < 85),
    # Also create domain-specific NDI variables for supplementary analysis
    NDI_cognitive = as.numeric(cog_comp_score < 85),
    NDI_language = as.numeric(lang_comp_score < 85),
    NDI_motor = as.numeric(motor_comp_score < 85)
  )

# Calculate NDI prevalence
n_total <- nrow(df_ndi)
n_ndi <- sum(df_ndi$NDI, na.rm = TRUE)
pct_ndi <- round(100 * n_ndi / n_total, 1)

cat("NDI PREVALENCE:\n")
cat("--------------\n")
cat("Total participants:", n_total, "\n")
cat("Participants with NDI:", n_ndi, "(", pct_ndi, "%)\n", sep = "")
cat("  - Cognitive impairment:", sum(df_ndi$NDI_cognitive, na.rm = TRUE), 
    "(", round(100 * sum(df_ndi$NDI_cognitive, na.rm = TRUE) / n_total, 1), "%)\n", sep = "")
cat("  - Language impairment:", sum(df_ndi$NDI_language, na.rm = TRUE),
    "(", round(100 * sum(df_ndi$NDI_language, na.rm = TRUE) / n_total, 1), "%)\n", sep = "")
cat("  - Motor impairment:", sum(df_ndi$NDI_motor, na.rm = TRUE),
    "(", round(100 * sum(df_ndi$NDI_motor, na.rm = TRUE) / n_total, 1), "%)\n\n", sep = "")

# 17. Calculate AUC with Bootstrap CIs ----
cat("DISCRIMINATIVE ABILITY ANALYSIS:\n")
cat("-------------------------------\n")

# Function to calculate AUC with bootstrap CI
calculate_auc_with_ci <- function(predictor, outcome, n_boot = 2000) {
  # Remove missing values
  complete_data <- data.frame(
    predictor = predictor,
    outcome = outcome
  ) %>%
    filter(complete.cases(.))
  
  # Calculate ROC and AUC
  roc_obj <- roc(outcome ~ predictor, data = complete_data, quiet = TRUE)
  
  # Bootstrap CI using pROC's built-in function
  ci_obj <- ci.auc(roc_obj, method = "bootstrap", boot.n = n_boot, 
                   conf.level = 0.95, progress = "none")
  
  # Calculate optimal cutpoint using Youden index
  coords_obj <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"),
                       best.method = "youden")
  
  return(list(
    auc = as.numeric(ci_obj[2]),
    ci_lower = as.numeric(ci_obj[1]),
    ci_upper = as.numeric(ci_obj[3]),
    roc = roc_obj,
    optimal_cutpoint = coords_obj$threshold,
    sensitivity = coords_obj$sensitivity,
    specificity = coords_obj$specificity
  ))
}

# Calculate AUC for supervised composite score (using cognitive outcome scores)
cat("\nCalculating AUC for supervised composite score...\n")
auc_supervised <- calculate_auc_with_ci(
  predictor = -df_ndi$cog_comp_score_supervised,  # Negative because higher risk = lower outcome
  outcome = df_ndi$NDI,
  n_boot = 2000
)

cat("Supervised", best_supervised, "composite score:\n")
cat("  AUC = ", sprintf("%.3f", auc_supervised$auc), 
    " (95% CI: ", sprintf("%.3f", auc_supervised$ci_lower), 
    "-", sprintf("%.3f", auc_supervised$ci_upper), ")\n", sep = "")
cat("  Optimal cutpoint:", sprintf("%.3f", auc_supervised$optimal_cutpoint), "\n")
cat("  Sensitivity:", sprintf("%.1f%%", 100 * auc_supervised$sensitivity), "\n")
cat("  Specificity:", sprintf("%.1f%%", 100 * auc_supervised$specificity), "\n")

# Calculate AUC for unsupervised composite score
cat("\nCalculating AUC for unsupervised composite score...\n")
auc_unsupervised <- calculate_auc_with_ci(
  predictor = -df_ndi$cog_comp_score_unsupervised,  # Negative because higher risk = lower outcome
  outcome = df_ndi$NDI,
  n_boot = 2000
)

cat("Unsupervised", best_unsupervised, "composite score:\n")
cat("  AUC = ", sprintf("%.3f", auc_unsupervised$auc), 
    " (95% CI: ", sprintf("%.3f", auc_unsupervised$ci_lower), 
    "-", sprintf("%.3f", auc_unsupervised$ci_upper), ")\n", sep = "")
cat("  Optimal cutpoint:", sprintf("%.3f", auc_unsupervised$optimal_cutpoint), "\n")
cat("  Sensitivity:", sprintf("%.1f%%", 100 * auc_unsupervised$sensitivity), "\n")
cat("  Specificity:", sprintf("%.1f%%", 100 * auc_unsupervised$specificity), "\n")

# Test for significant difference between AUCs
cat("\nTesting difference between AUCs...\n")
roc_test <- roc.test(auc_supervised$roc, auc_unsupervised$roc, method = "delong")
cat("  DeLong test p-value:", sprintf("%.4f", roc_test$p.value), "\n")

# 18. Calculate Odds Ratios for Risk Tertiles ----
cat("\n\nRISK TERTILE ANALYSIS:\n")
cat("---------------------\n")

# Function to calculate OR with CI
calculate_tertile_or <- function(data, tertile_var, outcome_var) {
  # Create dummy variables for tertiles
  data_model <- data %>%
    mutate(
      low_risk = as.numeric(get(tertile_var) == "Low Risk"),
      moderate_risk = as.numeric(get(tertile_var) == "Moderate Risk"),
      high_risk = as.numeric(get(tertile_var) == "High Risk")
    ) %>%
    filter(!is.na(get(outcome_var)), !is.na(get(tertile_var)))
  
  # Fit logistic regression with low risk as reference
  model <- glm(as.formula(paste(outcome_var, "~ moderate_risk + high_risk")), 
               data = data_model, family = binomial())
  
  # Extract results
  summary_model <- summary(model)
  coef_table <- summary_model$coefficients
  
  # Calculate ORs and CIs
  or_moderate <- exp(coef_table["moderate_risk", "Estimate"])
  or_high <- exp(coef_table["high_risk", "Estimate"])
  
  ci_moderate <- exp(confint(model)["moderate_risk", ])
  ci_high <- exp(confint(model)["high_risk", ])
  
  # Get sample sizes per tertile
  n_per_tertile <- table(data_model[[tertile_var]], data_model[[outcome_var]])
  
  return(list(
    or_moderate = or_moderate,
    ci_moderate = ci_moderate,
    p_moderate = coef_table["moderate_risk", "Pr(>|z|)"],
    or_high = or_high,
    ci_high = ci_high,
    p_high = coef_table["high_risk", "Pr(>|z|)"],
    n_table = n_per_tertile,
    model = model
  ))
}

# Calculate ORs for supervised tertiles
cat("\nSupervised composite score tertiles:\n")
or_supervised <- calculate_tertile_or(df_ndi, "cog_comp_score_sup_tertile", "NDI")

cat("\nNDI by supervised risk tertile:\n")
print(or_supervised$n_table)
cat("\nProportion with NDI by tertile:\n")
prop_table <- prop.table(or_supervised$n_table, margin = 1)
cat("  Low Risk:", sprintf("%.1f%%", 100 * prop_table["Low Risk", "1"]), "\n")
cat("  Moderate Risk:", sprintf("%.1f%%", 100 * prop_table["Moderate Risk", "1"]), "\n")
cat("  High Risk:", sprintf("%.1f%%", 100 * prop_table["High Risk", "1"]), "\n")

cat("\nOdds Ratios (reference = Low Risk):\n")
cat("  Moderate vs Low: OR =", sprintf("%.2f", or_supervised$or_moderate),
    "(95% CI:", sprintf("%.2f", or_supervised$ci_moderate[1]), "-",
    sprintf("%.2f", or_supervised$ci_moderate[2]), "), p =",
    sprintf("%.4f", or_supervised$p_moderate), "\n")
cat("  High vs Low: OR =", sprintf("%.2f", or_supervised$or_high),
    "(95% CI:", sprintf("%.2f", or_supervised$ci_high[1]), "-",
    sprintf("%.2f", or_supervised$ci_high[2]), "), p =",
    sprintf("%.4f", or_supervised$p_high), "\n")

# Calculate ORs for unsupervised tertiles
cat("\n\nUnsupervised composite score tertiles:\n")
or_unsupervised <- calculate_tertile_or(df_ndi, "cog_comp_score_unsup_tertile", "NDI")

cat("\nNDI by unsupervised risk tertile:\n")
print(or_unsupervised$n_table)
cat("\nProportion with NDI by tertile:\n")
prop_table_unsup <- prop.table(or_unsupervised$n_table, margin = 1)
cat("  Low Risk:", sprintf("%.1f%%", 100 * prop_table_unsup["Low Risk", "1"]), "\n")
cat("  Moderate Risk:", sprintf("%.1f%%", 100 * prop_table_unsup["Moderate Risk", "1"]), "\n")
cat("  High Risk:", sprintf("%.1f%%", 100 * prop_table_unsup["High Risk", "1"]), "\n")

cat("\nOdds Ratios (reference = Low Risk):\n")
cat("  Moderate vs Low: OR =", sprintf("%.2f", or_unsupervised$or_moderate),
    "(95% CI:", sprintf("%.2f", or_unsupervised$ci_moderate[1]), "-",
    sprintf("%.2f", or_unsupervised$ci_moderate[2]), "), p =",
    sprintf("%.4f", or_unsupervised$p_moderate), "\n")
cat("  High vs Low: OR =", sprintf("%.2f", or_unsupervised$or_high),
    "(95% CI:", sprintf("%.2f", or_unsupervised$ci_high[1]), "-",
    sprintf("%.2f", or_unsupervised$ci_high[2]), "), p =",
    sprintf("%.4f", or_unsupervised$p_high), "\n")

# 19. Create ROC curve visualization ----
cat("\n\nCreating ROC curve visualization...\n")

# Prepare data for plotting
roc_supervised_df <- data.frame(
  fpr = 1 - auc_supervised$roc$specificities,
  tpr = auc_supervised$roc$sensitivities,
  model = paste0("Supervised (", best_supervised, ")")
)

roc_unsupervised_df <- data.frame(
  fpr = 1 - auc_unsupervised$roc$specificities,
  tpr = auc_unsupervised$roc$sensitivities,
  model = paste0("Unsupervised (", best_unsupervised, ")")
)

roc_combined <- rbind(roc_supervised_df, roc_unsupervised_df)

# Create ROC plot
p_roc <- ggplot(roc_combined, aes(x = fpr, y = tpr, color = model)) +
  geom_line(size = 1.2) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray50") +
  scale_x_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
  scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
  scale_color_manual(values = c("Supervised (ridge)" = "#2E86AB", 
                                "Supervised (elastic)" = "#2E86AB",
                                "Supervised (lasso)" = "#2E86AB",
                                "Supervised (ols)" = "#2E86AB",
                                "Supervised (rf)" = "#2E86AB",
                                "Unsupervised (FAMD_Dim1)" = "#A23B72",
                                "Unsupervised (MCA_Dim1)" = "#A23B72",
                                "Unsupervised (PAM_Cluster)" = "#A23B72")) +
  labs(
    x = "False Positive Rate (1 - Specificity)",
    y = "True Positive Rate (Sensitivity)",
    color = "Model",
    title = "ROC Curves for Prediction of Neurodevelopmental Impairment",
    subtitle = paste0("Supervised AUC = ", sprintf("%.3f", auc_supervised$auc),
                      " (", sprintf("%.3f", auc_supervised$ci_lower), "-",
                      sprintf("%.3f", auc_supervised$ci_upper), ")",
                      "  |  Unsupervised AUC = ", sprintf("%.3f", auc_unsupervised$auc),
                      " (", sprintf("%.3f", auc_unsupervised$ci_lower), "-",
                      sprintf("%.3f", auc_unsupervised$ci_upper), ")")
  ) +
  theme_classic(base_size = 14) +
  theme(
    legend.position = c(0.7, 0.2),
    legend.background = element_rect(fill = "white", color = "black"),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_text(size = 12)
  ) +
  coord_equal()

ggsave("NDI_ROC_curves.png", p_roc, width = 8, height = 8, dpi = 300)

# 20. Create tertile risk visualization ----
cat("Creating tertile risk visualization...\n")

# Prepare data for tertile plot
tertile_data <- rbind(
  data.frame(
    model = paste0("Supervised\n(", best_supervised, ")"),
    tertile = c("Low Risk", "Moderate Risk", "High Risk"),
    prop_ndi = as.numeric(prop.table(or_supervised$n_table, margin = 1)[, "1"]),
    n_total = rowSums(or_supervised$n_table),
    n_ndi = or_supervised$n_table[, "1"]
  ),
  data.frame(
    model = paste0("Unsupervised\n(", best_unsupervised, ")"),
    tertile = c("Low Risk", "Moderate Risk", "High Risk"),
    prop_ndi = as.numeric(prop.table(or_unsupervised$n_table, margin = 1)[, "1"]),
    n_total = rowSums(or_unsupervised$n_table),
    n_ndi = or_unsupervised$n_table[, "1"]
  )
)

tertile_data$tertile <- factor(tertile_data$tertile, 
                               levels = c("Low Risk", "Moderate Risk", "High Risk"))

# Create bar plot
p_tertiles <- ggplot(tertile_data, aes(x = tertile, y = prop_ndi * 100, fill = model)) +
  geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
  geom_text(aes(label = paste0(round(prop_ndi * 100, 1), "%\n(", n_ndi, "/", n_total, ")")),
            position = position_dodge(width = 0.9), vjust = -0.5, size = 3.5) +
  scale_fill_manual(values = c("#2E86AB", "#A23B72")) +
  scale_y_continuous(limits = c(0, max(tertile_data$prop_ndi * 100) * 1.2),
                     expand = c(0, 0)) +
  labs(
    x = "Risk Tertile",
    y = "Proportion with NDI (%)",
    fill = "Model",
    title = "Neurodevelopmental Impairment by Risk Tertile",
    subtitle = "Numbers show % (n with NDI / n total)"
  ) +
  theme_classic(base_size = 14) +
  theme(
    legend.position = "top",
    plot.title = element_text(face = "bold"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14, face = "bold")
  )

ggsave("NDI_by_risk_tertiles.png", p_tertiles, width = 10, height = 8, dpi = 300)

# 21. Export NDI analysis results ----
cat("\n\nExporting NDI analysis results...\n")

# Create summary data frame
ndi_summary <- data.frame(
  Analysis = c(
    "Total participants",
    "Participants with NDI",
    "NDI prevalence (%)",
    "",
    "Supervised model",
    paste0("  AUC (95% CI)"),
    "  Optimal cutpoint",
    "  Sensitivity (%)",
    "  Specificity (%)",
    "",
    "Unsupervised model", 
    paste0("  AUC (95% CI)"),
    "  Optimal cutpoint",
    "  Sensitivity (%)",
    "  Specificity (%)",
    "",
    "DeLong test p-value",
    "",
    "Supervised tertiles",
    "  Low risk: NDI rate (%)",
    "  Moderate risk: NDI rate (%)",
    "  High risk: NDI rate (%)",
    "  OR Moderate vs Low (95% CI)",
    "  OR High vs Low (95% CI)",
    "",
    "Unsupervised tertiles",
    "  Low risk: NDI rate (%)",
    "  Moderate risk: NDI rate (%)", 
    "  High risk: NDI rate (%)",
    "  OR Moderate vs Low (95% CI)",
    "  OR High vs Low (95% CI)"
  ),
  Value = c(
    as.character(n_total),
    paste0(n_ndi, " (", pct_ndi, "%)"),
    as.character(pct_ndi),
    "",
    best_supervised,
    paste0(sprintf("%.3f", auc_supervised$auc), " (",
           sprintf("%.3f", auc_supervised$ci_lower), "-",
           sprintf("%.3f", auc_supervised$ci_upper), ")"),
    sprintf("%.3f", auc_supervised$optimal_cutpoint),
    sprintf("%.1f", 100 * auc_supervised$sensitivity),
    sprintf("%.1f", 100 * auc_supervised$specificity),
    "",
    best_unsupervised,
    paste0(sprintf("%.3f", auc_unsupervised$auc), " (",
           sprintf("%.3f", auc_unsupervised$ci_lower), "-",
           sprintf("%.3f", auc_unsupervised$ci_upper), ")"),
    sprintf("%.3f", auc_unsupervised$optimal_cutpoint),
    sprintf("%.1f", 100 * auc_unsupervised$sensitivity),
    sprintf("%.1f", 100 * auc_unsupervised$specificity),
    "",
    sprintf("%.4f", roc_test$p.value),
    "",
    "",
    sprintf("%.1f", 100 * prop_table["Low Risk", "1"]),
    sprintf("%.1f", 100 * prop_table["Moderate Risk", "1"]),
    sprintf("%.1f", 100 * prop_table["High Risk", "1"]),
    paste0(sprintf("%.2f", or_supervised$or_moderate), " (",
           sprintf("%.2f", or_supervised$ci_moderate[1]), "-",
           sprintf("%.2f", or_supervised$ci_moderate[2]), "), p=",
           sprintf("%.4f", or_supervised$p_moderate)),
    paste0(sprintf("%.2f", or_supervised$or_high), " (",
           sprintf("%.2f", or_supervised$ci_high[1]), "-",
           sprintf("%.2f", or_supervised$ci_high[2]), "), p=",
           sprintf("%.4f", or_supervised$p_high)),
    "",
    "",
    sprintf("%.1f", 100 * prop_table_unsup["Low Risk", "1"]),
    sprintf("%.1f", 100 * prop_table_unsup["Moderate Risk", "1"]),
    sprintf("%.1f", 100 * prop_table_unsup["High Risk", "1"]),
    paste0(sprintf("%.2f", or_unsupervised$or_moderate), " (",
           sprintf("%.2f", or_unsupervised$ci_moderate[1]), "-",
           sprintf("%.2f", or_unsupervised$ci_moderate[2]), "), p=",
           sprintf("%.4f", or_unsupervised$p_moderate)),
    paste0(sprintf("%.2f", or_unsupervised$or_high), " (",
           sprintf("%.2f", or_unsupervised$ci_high[1]), "-",
           sprintf("%.2f", or_unsupervised$ci_high[2]), "), p=",
           sprintf("%.4f", or_unsupervised$p_high))
  )
)

write_csv(ndi_summary, "NDI_Analysis_Summary.csv")

# Export detailed results
ndi_detailed <- df_ndi %>%
  select(study_id, NDI, NDI_cognitive, NDI_language, NDI_motor,
         cog_comp_score_supervised, cog_comp_score_unsupervised,
         cog_comp_score_sup_tertile, cog_comp_score_unsup_tertile,
         cog_comp_score, lang_comp_score, motor_comp_score)

write_csv(ndi_detailed, "NDI_Participant_Level_Data.csv")

# 22. Generate manuscript text ----
cat("\n", rep("=", 80), "\n", sep = "")
cat("MANUSCRIPT TEXT FOR NDI ANALYSIS:\n")
cat(rep("=", 80), "\n\n", sep = "")

cat("To further evaluate clinical applicability, we examined the association between\n")
cat("our composite scores and neurodevelopmental impairment (NDI), a clinically\n")
cat("relevant outcome commonly used in neonatal intervention trials. NDI was defined\n")
cat("as a score <85 on the Bayley-III cognitive, language, or motor composite score.\n")
cat("Among the", n_total, "participants,", n_ndi, "(", pct_ndi, "%) met criteria for NDI.\n\n", sep = "")

cat("The supervised", best_supervised, "composite score demonstrated", 
    ifelse(auc_supervised$auc >= 0.8, "excellent", 
           ifelse(auc_supervised$auc >= 0.7, "good", "moderate")),
    "discriminative ability with an AUC of", sprintf("%.3f", auc_supervised$auc),
    "(95% CI:", sprintf("%.3f", auc_supervised$ci_lower), "-",
    sprintf("%.3f", auc_supervised$ci_upper), "), as did the unsupervised",
    best_unsupervised, "approach with an AUC of", sprintf("%.3f", auc_unsupervised$auc),
    "(95% CI:", sprintf("%.3f", auc_unsupervised$ci_lower), "-",
    sprintf("%.3f", auc_unsupervised$ci_upper), ").\n\n")

cat("Infants in the highest risk tertile had", sprintf("%.2f", or_supervised$or_high),
    "times higher odds of NDI compared to those in the lowest risk tertile\n")
cat("(OR =", sprintf("%.2f", or_supervised$or_high), ", 95% CI:",
    sprintf("%.2f", or_supervised$ci_high[1]), "-",
    sprintf("%.2f", or_supervised$ci_high[2]), ", p =",
    ifelse(or_supervised$p_high < 0.001, "<0.001", sprintf("%.3f", or_supervised$p_high)),
    ") using the supervised score,\n", sep = "")
cat("with similar findings for the unsupervised approach (OR =",
    sprintf("%.2f", or_unsupervised$or_high), ", 95% CI:",
    sprintf("%.2f", or_unsupervised$ci_high[1]), "-",
    sprintf("%.2f", or_unsupervised$ci_high[2]), ", p =",
    ifelse(or_unsupervised$p_high < 0.001, "<0.001", sprintf("%.3f", or_unsupervised$p_high)),
    ").\n", sep = "")

cat("\n", rep("=", 80), "\n", sep = "")
cat("NDI ANALYSIS COMPLETE!\n")
cat(rep("=", 80), "\n\n", sep = "")

cat("New output files:\n")
cat("- NDI_Analysis_Summary.csv: Complete summary of NDI analysis results\n")
cat("- NDI_Participant_Level_Data.csv: Participant-level NDI and score data\n")
cat("- NDI_ROC_curves.png: ROC curves comparing model performance\n")
cat("- NDI_by_risk_tertiles.png: Bar chart of NDI rates by risk tertile\n")

# Save updated workspace
save.image("SRC_Analysis_Complete_with_NDI.RData")

#END
